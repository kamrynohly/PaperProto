{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/graceli/Documents/Dev/PaperProtoTwo/PaperProto/app/api/claude/route.js"],"sourcesContent":["// app/api/claude/route.js\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request) {\n  console.log(\"‚≠ê API route called: /api/claude\");\n  \n  const API_KEY = process.env.API_KEY;\n  \n  if (!API_KEY) {\n    console.error(\"‚ùå API key not configured\");\n    return NextResponse.json(\n      { message: 'API key not configured' },\n      { status: 500 }\n    );\n  }\n\n  try {\n    const body = await request.json();\n    const { messages, system } = body;\n\n    console.log(\"üìù Request system prompt:\", system ? system.substring(0, 100) + \"...\" : \"None\");\n    console.log(\"üì® Number of messages:\", messages.length);\n    \n    // Debug output about message format\n    console.log(\"Message formats:\", messages.map(msg => ({\n      role: msg.role,\n      contentType: typeof msg.content,\n      isArray: Array.isArray(msg.content),\n      hasImages: msg.hasImages || false\n    })));\n    \n    // Process user messages with images\n    // Process user messages with images\nfor (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n    \n    // Handle user messages with images\n    if (msg.role === 'user' && msg.hasImages === true && typeof msg.content === 'object' && !Array.isArray(msg.content)) {\n      console.log(`üñºÔ∏è Processing user message with images at index ${i}`);\n      \n      const { text, images } = msg.content;\n      \n      // Convert to multimodal format\n      const multiModalContent = [\n        { type: 'text', text: text || '' }\n      ];\n      \n      // Add images\n      if (Array.isArray(images) && images.length > 0) {\n        console.log(`Found ${images.length} images to process`);\n        \n        for (let j = 0; j < images.length; j++) {\n          const imgUrl = images[j];\n          \n          // Strip the data URL prefix\n          const base64Data = imgUrl.replace(/^data:image\\/\\w+;base64,/, '');\n          \n          multiModalContent.push({\n            type: 'image',\n            source: {\n              type: 'base64',\n              media_type: 'image/jpeg',\n              data: base64Data\n            }\n          });\n          \n          console.log(`Processed image ${j+1}, data length: ${base64Data.length} chars`);\n        }\n      }\n      \n      // Replace the original content with the multimodal format\n      messages[i] = {\n        role: msg.role,\n        content: multiModalContent\n      };\n      \n      console.log(`‚úÖ Converted message ${i} to multimodal format with ${multiModalContent.length - 1} images`);\n    }\n    \n    // Remove hasImages property from all messages before sending to API\n    if (messages[i].hasImages !== undefined) {\n      delete messages[i].hasImages;\n    }\n    \n    // Fix undefined/null content\n    if (messages[i].content === undefined || messages[i].content === null) {\n      console.log(`‚ö†Ô∏è Fixing undefined/null content in message ${i}`);\n      messages[i].content = \"\";\n    }\n  }\n    \n    // Check if any message has multimodal content after processing\n    const hasMultimodal = messages.some(msg => Array.isArray(msg.content));\n    console.log(\"üñºÔ∏è Contains multimodal content:\", hasMultimodal);\n    \n    // Validate message format\n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      \n      // Ensure role is valid\n      if (!msg.role || (msg.role !== 'user' && msg.role !== 'assistant')) {\n        console.error(\"‚ùå Invalid role in message at index\", i);\n        return NextResponse.json(\n          { message: `Invalid role in message at index ${i}` },\n          { status: 400 }\n        );\n      }\n      \n      // Fix non-array object content\n      if (typeof msg.content === 'object' && !Array.isArray(msg.content)) {\n        console.log(`‚ö†Ô∏è Converting object content to multimodal format in message ${i}`);\n        try {\n          // Try to extract text content if any\n          let textContent = '';\n          if (msg.content.text) {\n            textContent = msg.content.text;\n          } else {\n            textContent = JSON.stringify(msg.content);\n          }\n          \n          // Convert to multimodal format with just text\n          messages[i].content = [{ type: 'text', text: textContent }];\n        } catch (e) {\n          console.error(`‚ùå Error converting object content:`, e);\n          messages[i].content = [{ type: 'text', text: '' }]; // Fallback if can't stringify\n        }\n      }\n      \n      // Validate content format after fixes\n      if (Array.isArray(msg.content)) {\n        // For array content, each item must have a valid type\n        for (let j = 0; j < msg.content.length; j++) {\n          const item = msg.content[j];\n          if (!item.type || (item.type !== 'text' && item.type !== 'image')) {\n            console.error(`‚ùå Invalid content type in message ${i}, item ${j}:`, item.type);\n            return NextResponse.json(\n              { message: `Invalid content type in message ${i}, item ${j}` },\n              { status: 400 }\n            );\n          }\n          \n          // For text items, validate text field\n          if (item.type === 'text' && typeof item.text !== 'string') {\n            console.error(`‚ùå Missing text field in message ${i}, item ${j}`);\n            // Fix it with empty string\n            messages[i].content[j].text = \"\";\n          }\n          \n          // For image items, validate source field\n          if (item.type === 'image') {\n            if (!item.source || !item.source.type || !item.source.media_type || !item.source.data) {\n              console.error(`‚ùå Invalid image source in message ${i}, item ${j}`);\n              \n              // Log detailed diagnostic info\n              console.error('Image source details:', {\n                hasSource: !!item.source,\n                sourceType: item.source?.type,\n                mediaType: item.source?.media_type,\n                hasData: !!item.source?.data,\n                dataLength: item.source?.data?.length || 0\n              });\n              \n              return NextResponse.json(\n                { message: `Invalid image source in message ${i}, item ${j}` },\n                { status: 400 }\n              );\n            }\n            \n            // Verify base64 data for image\n            if (item.source.type === 'base64') {\n              // Log info about the image data\n              console.log(`üñºÔ∏è Image in message ${i}, item ${j}:`);\n              console.log(`  - Media type: ${item.source.media_type}`);\n              console.log(`  - Data length: ${item.source.data.length} characters`);\n              \n              // Fix media_type if not properly set\n              if (!item.source.media_type.startsWith('image/')) {\n                console.warn(`‚ö†Ô∏è Fixing invalid media_type in message ${i}, item ${j}`);\n                messages[i].content[j].source.media_type = 'image/jpeg';\n              }\n              \n              // Ensure data is actually base64\n              try {\n                // Try to decode a small sample to verify it's valid base64\n                atob(item.source.data.substring(0, 10));\n              } catch (e) {\n                console.error(`‚ùå Invalid base64 data in message ${i}, item ${j}:`, e.message);\n                return NextResponse.json(\n                  { message: `Invalid base64 data in message ${i}, item ${j}` },\n                  { status: 400 }\n                );\n              }\n            }\n          }\n        }\n      } else if (typeof msg.content !== 'string') {\n        // If still not string after fixes, report error\n        console.error(`‚ùå Invalid content in message ${i}, expected string or array`);\n        return NextResponse.json(\n          { message: `Invalid content in message ${i}, expected string or array` },\n          { status: 400 }\n        );\n      }\n    }\n    \n    // Ensure consistent format across all messages\n    const firstMessageFormat = Array.isArray(messages[0].content) ? 'array' : 'string';\n    const hasInconsistentFormat = messages.some(msg => \n      (Array.isArray(msg.content) ? 'array' : 'string') !== firstMessageFormat\n    );\n    \n    if (hasInconsistentFormat) {\n      console.log(\"‚ö†Ô∏è Inconsistent message format: converting all to array format\");\n      \n      // Convert all messages to array format for consistency\n      for (let i = 0; i < messages.length; i++) {\n        if (!Array.isArray(messages[i].content)) {\n          const originalContent = messages[i].content;\n          messages[i] = {\n            role: messages[i].role,\n            content: [{ type: 'text', text: originalContent }]\n          };\n        }\n      }\n      \n      console.log(\"‚úÖ All messages converted to array format for consistency\");\n    }\n\n    const payload = {\n      model: \"claude-3-7-sonnet-20250219\",\n      messages: messages,\n      max_tokens: 16000,\n      temperature: 0.7\n    };\n\n    if (system) {\n      payload.system = system;\n    }\n\n    // Check payload size\n    const payloadStringified = JSON.stringify(payload);\n    const payloadSizeMB = (payloadStringified.length / 1024 / 1024).toFixed(2);\n    console.log(`üìä Payload size: ${payloadSizeMB} MB`);\n    \n    if (parseFloat(payloadSizeMB) > 20) {\n      console.warn(`‚ö†Ô∏è Large payload detected (${payloadSizeMB} MB) - may exceed API limits`);\n    }\n\n    console.log(\"üöÄ Sending request to Claude API\");\n    \n    // Log a sample of the payload (omitting large base64 strings)\n    const samplePayload = JSON.parse(JSON.stringify(payload));\n    if (samplePayload.messages && Array.isArray(samplePayload.messages)) {\n      samplePayload.messages = samplePayload.messages.map(msg => {\n        if (Array.isArray(msg.content)) {\n          return {\n            ...msg,\n            content: msg.content.map(item => {\n              if (item.type === 'image' && item.source && item.source.data) {\n                return {\n                  ...item,\n                  source: {\n                    ...item.source,\n                    data: `[BASE64_DATA: ${item.source.data.length} chars]`\n                  }\n                };\n              }\n              return item;\n            })\n          };\n        }\n        return msg;\n      });\n    }\n    console.log(\"üì¶ Payload sample:\", JSON.stringify(samplePayload).substring(0, 1000) + \"...\");\n\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': API_KEY,\n        'anthropic-version': '2023-06-01'\n      },\n      body: payloadStringified,\n    });\n\n    if (!response.ok) {\n      let errorDetails = \"Unknown error\";\n      try {\n        const errorData = await response.json();\n        errorDetails = JSON.stringify(errorData);\n        console.error(\"‚ùå Error from Claude API:\", errorData);\n      } catch (e) {\n        // If can't parse as JSON, try to get text\n        errorDetails = await response.text();\n        console.error(\"‚ùå Error from Claude API (text):\", errorDetails);\n      }\n      \n      return NextResponse.json(\n        { \n          message: 'Error from Claude API', \n          status: response.status, \n          error: errorDetails\n        },\n        { status: response.status }\n      );\n    }\n\n    console.log(\"‚úÖ Successfully received response from Claude API\");\n    const data = await response.json();\n    \n    return NextResponse.json(data);\n  } catch (error) {\n    console.error(\"‚ùå Server error:\", error.message);\n    return NextResponse.json(\n      { message: 'Internal server error', error: error.message },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}